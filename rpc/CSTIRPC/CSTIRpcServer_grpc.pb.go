// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package CSTIRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSTIRpcServerClient is the client API for CSTIRpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSTIRpcServerClient interface {
	// generate ical with json configure
	JsonGenerate(ctx context.Context, in *ConfJson, opts ...grpc.CallOption) (*ResultIcal, error)
	TomlGenerate(ctx context.Context, in *ConfToml, opts ...grpc.CallOption) (*ResultIcal, error)
}

type cSTIRpcServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCSTIRpcServerClient(cc grpc.ClientConnInterface) CSTIRpcServerClient {
	return &cSTIRpcServerClient{cc}
}

func (c *cSTIRpcServerClient) JsonGenerate(ctx context.Context, in *ConfJson, opts ...grpc.CallOption) (*ResultIcal, error) {
	out := new(ResultIcal)
	err := c.cc.Invoke(ctx, "/rpcserver.CSTIRpcServer/jsonGenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSTIRpcServerClient) TomlGenerate(ctx context.Context, in *ConfToml, opts ...grpc.CallOption) (*ResultIcal, error) {
	out := new(ResultIcal)
	err := c.cc.Invoke(ctx, "/rpcserver.CSTIRpcServer/tomlGenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSTIRpcServerServer is the server API for CSTIRpcServer service.
// All implementations must embed UnimplementedCSTIRpcServerServer
// for forward compatibility
type CSTIRpcServerServer interface {
	// generate ical with json configure
	JsonGenerate(context.Context, *ConfJson) (*ResultIcal, error)
	TomlGenerate(context.Context, *ConfToml) (*ResultIcal, error)
	mustEmbedUnimplementedCSTIRpcServerServer()
}

// UnimplementedCSTIRpcServerServer must be embedded to have forward compatible implementations.
type UnimplementedCSTIRpcServerServer struct {
}

func (UnimplementedCSTIRpcServerServer) JsonGenerate(context.Context, *ConfJson) (*ResultIcal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsonGenerate not implemented")
}
func (UnimplementedCSTIRpcServerServer) TomlGenerate(context.Context, *ConfToml) (*ResultIcal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TomlGenerate not implemented")
}
func (UnimplementedCSTIRpcServerServer) mustEmbedUnimplementedCSTIRpcServerServer() {}

// UnsafeCSTIRpcServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSTIRpcServerServer will
// result in compilation errors.
type UnsafeCSTIRpcServerServer interface {
	mustEmbedUnimplementedCSTIRpcServerServer()
}

func RegisterCSTIRpcServerServer(s grpc.ServiceRegistrar, srv CSTIRpcServerServer) {
	s.RegisterService(&CSTIRpcServer_ServiceDesc, srv)
}

func _CSTIRpcServer_JsonGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfJson)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSTIRpcServerServer).JsonGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.CSTIRpcServer/jsonGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSTIRpcServerServer).JsonGenerate(ctx, req.(*ConfJson))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSTIRpcServer_TomlGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfToml)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSTIRpcServerServer).TomlGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcserver.CSTIRpcServer/tomlGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSTIRpcServerServer).TomlGenerate(ctx, req.(*ConfToml))
	}
	return interceptor(ctx, in, info, handler)
}

// CSTIRpcServer_ServiceDesc is the grpc.ServiceDesc for CSTIRpcServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSTIRpcServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcserver.CSTIRpcServer",
	HandlerType: (*CSTIRpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "jsonGenerate",
			Handler:    _CSTIRpcServer_JsonGenerate_Handler,
		},
		{
			MethodName: "tomlGenerate",
			Handler:    _CSTIRpcServer_TomlGenerate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CSTIRpcServer.proto",
}
